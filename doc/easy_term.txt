*easy_term.txt*                For Vim version 8.2.    Last change: 2020 Aug 31

                                 -----------
                                  Easy Term
                                 -----------

Author: Beomjoon Goh

								    *easy_term*
1. Introduction				|easy_term_intro|
2. Usage				|easy_term_usage|
	Commands			|easy_term_commands|
	Mappings			|easy_term_mappings|
3. Communication			|easy_term_communication|
	Vim to terminal			|easy_term_comm_vim2term|
	Terminal to vim			|easy_term_comm_term2vim|
4. Settings				|easy_term_settings|
5. License				|easy_term_license|
6. Bugs					|easy_term_bugs|
7. Contributing				|easy_term_contributing|
8. Changelog				|easy_term_changelog|
9. Credits				|easy_term_credits|

==============================================================================
1. Introduction						      *easy_term_intro*

The Easy Term makes using vim's |:terminal| feature easier to use.


The following features and functionality are provided:
    * Make aliases for opening the vim terminal emulator.
    * `tovim` utility for Python and Bash, if you choose to use, can do a few
      useful things like opening a new buffer from terminal or change cwd of
      vim to that of terminal.
    * Send texts from an open buffer to the terminal with a mapping.
    * Past/Yank the last output of the terminal to an open buffer with a
      mapping.

==============================================================================
2. Usage						      *easy_term_usage*

							   *easy_term_commands*
Commands~
									*:Term*
:Term[!] [{cmd}]

	Split Opens a vim terminal emulator window running {cmd}.  The {cmd}
	is tested whether it is an alias or a command.  If given argument is
	found in the dictionary key list, the value of |easy_term_alias| is
	passed to |term_start()| function.  Otherwise, the whole argument is
	passed.  If {cmd} is not given, the value of empty key is used.

	When [!] is added, opens the terminal window using the current window
	if it is possible instead of splitting.

	Any <mods> for split window can be used such as |:vertical|.  If
	<mods> that forcibly takes full width or height is given,
	|easy_term_rows| or |easy_term_cols| is used to calculate
	corresponding minimum height or width.

	Usage Examples: >
		:Term
		:Term bash
		:vertical Term python3 -i myprogram.py
<	
	After the terminal job is finished, the window is automatically
	closed (|term++close|).

	"term_name" is set as `[Terminal] word` using the first word of {cmd}.

	Internally stores the most recent terminal buffer number for public
	functions and mappings.  And it is referred to as "primary" terminal.
	To change the primary terminal to a different one, use
	|<Plug>(EasyTermSet)| mapping or |easy_term#Tapi_set_terminal_bufnr()|
	via terminal-vim communication.

	Tab completion is supported using the keys of |easy_term_alias|.  If
	you want to define additional commands with completion, for example
	`Tterm` that opens a terminal window in a new tab, put this in your
	vimrc: >
		:command! -nargs=? -complete=custom,easy_term#Complete
				\ Tterm tab Term <args>
<
							   *easy_term_mappings*
Mappings~

This plugin defines the following <Plug> mappings:

{mod} {rhs}                    Description~
-------------------------------------------------------------------------
 n,x  |<Plug>(EasyTermSendText)| Send a line or selected text to terminal
 n    |<Plug>(EasyTermPutLast)|  Paste last output of terminal to buffer
 t    |<Plug>(EasyTermYankLast)| Yank last output of terminal
 n    |<Plug>(EasyTermCdVim)|    Change cwd of vim & shell to buffer's dir
 t    |<Plug>(EasyTermCdTerm)|   Change cwd of shell to vim's cwd
 t    |<Plug>(EasyTermCdSet)|    Make the current terminal primary

To use any of the <Plug> mapping, add the following in your vimrc:
	{mod}map {lhs} {rhs}
For Example, >
	:nmap <Leader>p <Plug>(EasyTermPutLast)
<
						     *<Plug>(EasyTermSendText)*
<Plug>(EasyTermSendText)	mode: normal(n), visual(x)

	Sends current line(n) or visually selected texts(x) to the primary
	terminal buffer.  It is useful to test sections of a shell, python or
	vim script as you write so that the terminal buffer acts as a (crude)
	REPL environment.

	If current buffer's 'filetype' is python or vim, the text is treated
	so that python or ex gives in the expected behavior.  For example, in
	a python script, >
		if 'a' == 'b':
		    print("a is b")
		print(1 + 2)
<	which would run without a problem, if all three lines were sent
	literally to a terminal buffer it would say, >
		>>> if 'a' == 'b':
		...     print("a is b")
		... print(1 + 2)
		  File "<stdin>", line 3
		    print(1 + 2)
		    ^
		SyntaxError: invalid syntax
		>>> 
<	since python expects a new line character after an indented block such
	as class, def, for, and if-else.  Likewise, `ex` gives an error when
	empty line is entered or line-continuation exists.
	|<Plug>(EasyTermSendText)| takes care of (most of) these cases.

	 					      *<Plug>(EasyTermPutLast)*
<Plug>(EasyTermPutLast)		mode: normal(n)

	Pastes last output of the primary terminal buffer to current buffer
	before cursor position.  The last output is obtained by first guessing
	the prompt and search the previous occurrence of the guessed prompt
	then yanking all lines in between.

	There are many edge cases so please don't expect it would always work.
	For example, whenever PS2 exists, those lines with PS2 will be yanked
	as well.  In such cases, one can use the Terminal-Normal mode instead.
	See |Terminal-mode|, and |t_CTRL-W_N|.

	 					     *<Plug>(EasyTermYankLast)*
<Plug>(EasyTermYankLast)	mode: terminal(t)

	Yanks last output of the primary terminal buffer to the unnamed
	register "".  Has the same problem as |<Plug>(EasyTermPutLast)|.

							*<Plug>(EasyTermCdVim)*
<Plug>(EasyTermCdVim)		mode: normal(n)

	Change directory of vim and the primary terminal to current buffer's
	directory if terminal is running an interactive shell that has `cd`
	command.  It is useful when you first do commands like |:edit|, |:sp|
	to open a new buffer in "some remote" directory then want to change
	the terminal's working directory to follow that of vim. Uses the same
	underlying function of |<Plug>(EasyTermCdTerm)|.

						       *<Plug>(EasyTermCdTerm)*
<Plug>(EasyTermCdTerm)		mode: terminal(t)

	Change directory of the primary terminal, running an interactive
	shell that has `cd` command, to vim's cwd.

	Literally sends `cd {getcwd()}<CR>` to the terminal buffer.

							  *<Plug>(EasyTermSet)*
<Plug>(EasyTermSet)		mode: terminal(t)

	Sets the current terminal buffer as the primary one. All the mappings 
	needs to know which one is primary terminal if there are more than one
	terminal buffers.
	


==============================================================================
3. Communication				      *easy_term_communication*

See :help |terminal-communication| for more information on how this works.
Functionality of this plugin is essentially a thin, very much biased, wrapper
for specific cases.

						      *easy_term_comm_vim2term*
Vim to terminal~

To send keys to a terminal buffer using |term_sendkeys()|, the terminal buffer
number is required.  It is convenient to store the most recent, hence probably
desired, terminal buffer number, since the terminal can be opened multiple
times.  And it is referred to as the "primary" teriminal, which can be changed
using |<Plug>(EasyTermSet)| mapping.

Currently, there are three mappings for vim to terminal communication:
|<Plug>(EasyTermSendText)|, |<Plug>(EasyTermCdVim)|, |<Plug>(EasyTermCdTerm)|.

To use the primary terminal buffer number, use |easy_term#GetBufnr()|.
Example: >
	:echo bufname(easy_term#GetBufnr())
	:call easy_term#GetBufnr()->term_send("text")
<
See :help |terminal-to-job| for more info.

						      *easy_term_comm_term2vim*
Terminal to vim~

The terminal can send JSON to Vim, using a special escape sequence.  This JSON
can call vim functions only if the functions have a special prefix.  This
plugin provides a few useful vim functions and bash and python scripts that
can call those functions (if it makes sense to do so) conveniently.

BASH

To use this functionality, use |:Term| with >
	bash --rcfile {where_plugin_is}/scripts/setup_bash.sh
which is the default value of  |easy_term_alias|["bash"].

The `setup_bash.sh` script sources .bashrc file and a completion file for
`tovim` script then add `tovim` to the '$PATH' environment.

Below is the help message of `tovim` (tab-completion is supported):  >
  $ tovim help
  tovim - send JSON to parent process vim.
  
  Usage: tovim <command> [arguments]
  
  Commands:
    cd [path]   Change current working directory of vim and terminal to [path].
    make        Invoke :make and open QuickFix window.  Note that it's not a
                asynchronous process.
    set         Set the current terminal buffer to be primary.  It is used for
                terminal-to-job api (term_sendkeys()).
    sp [file]
    vs [file]   Open [file] with horizontal/vertical split after selecting the
                most closest vim window.  If no [file] is given, open an empty
                buffer.
    help        Print this help message
  
  See ':help easy_term' in vim for specific implementations and key mappings.
  For general information, see ':help terminal' in vim.
<
Usage example: >
	$ tovim cd ~/.vim
	$ tovim vs README.md
<



PYTHON

To use this functionality, use |:Term| with >
	python3 -i {where_plugin_is}/scripts/setup_python.py
which is the default value of |easy_term_alias|["py3"].

The `setup_python.py` script sources '$PYTHONSTARTUP' environment if it
exists, and define a class ToVim which is instantiated as `tovim = ToVim()`

Below is the help message of `tovim` object: >
  >>> help(tovim)
  Help on ToVim in module __main__ object:
  
  class ToVim(builtins.object)
   |  ToVim() - send JSON to parent process vim.
   |  
   |  Methods defined here:
   |  
   |  set(self)
   |      Set the current terminal buffer as primary.  It is used for
   |      terminal-to-job api (term_sendkeys()).
   |  
   |  ----------------------------------------------------------------------
   |  Data descriptors defined here:
   |  
   |  __dict__
   |      dictionary for instance variables (if defined)
   |  
   |  __weakref__
   |      list of weak references to the object (if defined)
  (END)
<

See :help |terminal-api| for more info.

==============================================================================
4. Settings						   *easy_term_settings*

						*easy_term_rows* *easy_term_cols*
g:easy_term_rows		string (default: "50%")
g:easy_term_cols		string (default: "50%")

	A comma separated list of number of lines/columns, percentage of
	number of lines/columns respect to 'lines'/'columns'.  If both number
	and percentage is given, minimum of the two is used.  This is used
	when |:Term| command has <mods> that opens a window with full width or
	height of the Vim window.  (|:topleft|, |:botright|).  Example: >
		:let g:easy_term_cols = "150,40%"
		:vertical botright Term bash -l
<
	If vim is on 300 columns wide screen, above commands open a vertically
	split, full-height and 120 column wide vim terminal emulator window
	running bash with a login shell option.

							     *easy_term_winfix*
g:easy_term_winfix		boolean (default: 1)

	When on, if |:Term| command has <mods> that uses |easy_term_rows| or
	|easy_term_cols|, locally sets 'winfixheight' and 'winfixwidth' and
	make already open windows (almost) equally high and wide.

							      *easy_term_alias*
g:easy_term_alias		Dictionary (default: see below)

	Dictionary of {alias} and {cmd} pairs for |:Term| command.  The
	default aliases are: >
		{
		\ ''     : 'bash --rcfile scripts/setup_bash.sh',
		\ 'bash' : 'bash --rcfile scripts/setup_bash.sh',
		\ 'py3'  : 'python3 -i scripts/setup_python.py',
		\ 'ex'   : 'vim -e'
		}
<
	The empty key is used for the default invocation of |:Term| command.

	To overwrite an alias or add a new one, use any Dictionary
	modification method (|dict-modification|).  Example: >
		:let g:easy_term_alias = {}
		:let g:easy_term_alias['zsh'] = 'zsh -i'
		or
		:let g:easy_term_alias = { 'zsh' : 'zsh -i' }
<

==============================================================================
5. License						    *easy_term_license*

Under the MIT License. (c) Copyright 2020 Beomjoon Goh.

==============================================================================
6. Bugs							       *easy_term_bugs*

Known~
  * easy_term#YankLastOutput(): When PS2 exists it yanks that part as well.

Unknown~

Please report any bugs you may find or feature request on the GitHub issue
tracker:

	https://github.com/BeomjoonGoh/vim-easy-term/issues

==============================================================================
7. Contributing					       *easy_term_contributing*

Contributions and pull requests are welcome.

	https://github.com/BeomjoonGoh/vim-easy-term

==============================================================================
8. Changelog						  *easy_term_changelog*

v0.0.1 - 2020-08-31
	* Initial release

==============================================================================
9. Credits						    *easy_term_credits*

Easy Term is originally written by Beomjoon Goh (GitHub: BeomjoonGoh)

 vim:tw=78:ts=8:noet:ft=help:norl:sw=8:sts=8:
