*easy_term.txt*	For Vim version 8.2.	Last change: 2020 Aug 14

		   Easy Term		by Beomjoon Goh



1. Introduction					|easy_term_intro|
2. Usage					|easy_term_usage|
	Commands
	Mappings				|easy_term_mappings|
3. Communication				|easy_term_communication|
	Vim to terminal
	Terminal to vim
4. Settings					|easy_term_settings|
5. License
6. Bugs
7. Credits
8. Changelog

==============================================================================
1. Introduction						*easy_term_intro*


==============================================================================
2. Usage						*easy_term_usage*

Commands~
								*:Term*
:Term[!] [{cmd}]

	Split Opens a vim terminal emulator window running {cmd}.  The {cmd}
	is tested whether it is an alias or a command.  If given argument is
	found in the dictionary key list, the value of |easy_term_alias| is
	passed to |term_start()| function.  Otherwise, the whole argument is
	passed.  If {cmd} is not given, the value of empty key is used.

	When [!] is added, opens the terminal window using the current window
	if it is possible instead of splitting.

	Any <mods> for split window can be used such as |:vertical|.  If
	<mods> that forcibly takes full width or height is given,
	|easy_term_rows| or |easy_term_cols| is used to calculate
	corresponding minimum height or width.

	Usage Examples: >
		:Term
		:Term bash
		:vertical Term python3 -i myprogram.py
<	
	After the terminal job is finished, the window is automatically
	closed (|term++close|).

	"term_name" is set as `[Terminal] word` using the first word of {cmd}.

	Internally stores the most recent terminal buffer number for public
	functions and mappings.  To change the number to a different terminal,
	use |easy_term#Tapi_set_terminal_bufnr()| via terminal-vim
	communication.

	Tab completion is supported with keys of |easy_term_alias|.  If you
	want to define additional commands with completion, for example
	`Tterm` that opens a terminal window in a new tab, put this in your
	vimrc file: >
		:command! -nargs=? -complete=custom,easy_term#Complete
				\ Tterm tab Term <args>
<
Mappings~
							*easy_term_mappings*

This plugin defines the following <Plug> mappings:

{mod}  {rhs}                     Description~
--------------------------------------------------------------------------
n,x    |<Plug>(EasyTermSendText)|  Send a line or selected text to terminal
n      |<Plug>(EasyTermPutLast)|   Paste last output of terminal to buffer
t      |<Plug>(EasyTermYankLast)|  Yank last output of terminal
n      |<Plug>(EasyTermCdVim)|     Change cwd of vim & shell to buffer's dir
t      |<Plug>(EasyTermCdTerm)|    Change cwd of shell to vim's cwd

To use any of the <Plug> mapping, add the following in your vimrc:
	{mod}map {lhs} {rhs}
NOTE do not use `noremap`.  Example: >
	:nmap <Leader>p <Plug>(EasyTermPutLast)
<
						*<Plug>(EasyTermSendText)*
<Plug>(EasyTermSendText)	mode: normal(n), visual(x)

	Sends current line(n) or visually selected text(x) to terminal buffer.
	It is useful to test sections of a shell, python or vim script as you
	write so that the terminal buffer acts as a (crude) REPL enviroment.

	If current buffer's 'filetype' is python or vim, the text is treated
	so that `python` or `ex` gives in the expected behavior.  For example,
	in a python script, >
		if 'a' == 'b':
		    print("a is b")
		print(1 + 2)
<
	which would run without a problem, if all three lines were sent
	literally to a terminal buffer it would say, >
		>>> if 'a' == 'b':
		...     print("a is b")
		... print(1 + 2)
		  File "<stdin>", line 3
		    print(1 + 2)
		    ^
		SyntaxError: invalid syntax
		>>> 
<
	Since `python` expects a new line character after and of an indented
	block such as class, def, for, and if-else.  Likewise, `ex` gives an
	error when empty line is entered or line-continuation exists.
	|<Plug>(EasyTermSendText)| takes care of (most of) these cases.

         					*<Plug>(EasyTermPutLast)*
<Plug>(EasyTermPutLast)		mode: normal(n)

	Pastes last output of terminal buffer to current buffer before cursor
	position.  The last output is obtained by first guessing prompt and
	search the next previous occurrence of the guessed prompt then yanking
	all lines in between.

	There are many edge cases so please don't expect it would always work.
	For example, whenever PS2 exists, those lines with PS2 will be yanked
	as well.  Use Terminal-Normal mode instead.  See |Terminal-mode|, and
	|t_CTRL-W_N|

         					*<Plug>(EasyTermYankLast)*
<Plug>(EasyTermYankLast)	mode: terminal(t)

	Yanks last output of terminal buffer to the unnamed register "".
	Has the same problem as |<Plug>(EasyTermPutLast)|.

         					*<Plug>(EasyTermCdVim)*
<Plug>(EasyTermCdVim)		mode: normal(n)

	Change directory of vim and terminal to current buffer's directory if
	terminal is running interactive shell that has `cd` command.

         					*<Plug>(EasyTermCdTerm)*
<Plug>(EasyTermCdTerm)		mode: terminal(t)

	Change directory of terminal, running interactive shell that has `cd`
	command, to vim's cwd.


==============================================================================
3. Communication				*easy_term_communication*


==============================================================================
4. Settings						*easy_term_settings*

						*easy_term_rows* *easy_term_cols*
g:easy_term_rows		string (default: "15,18%")
g:easy_term_cols		string (default: "150,40%")

	A comma separated list of number of lines/columns, percentage of
	number of lines/columns respect to 'line'/'column'.  If both number
	and percentage is given, minimum of the two is used.  This is used
	when |:Term| command has <mods> that opens a window with full width or
	height of the Vim window.  (|:topleft|, |:botright|).  Example: >
		:let g:easy_term_cols = "150"
		:vertical botright Term bash -l
<
	Opens a vertically split, full-height and 150 column wide vim terminal
	emulator window running bash with a login shell option.

							*easy_term_winfix*
g:easy_term_winfix		boolean (default: 1)

	When on, if |:Term| command has <mods> that uses |easy_term_rows| or
	|easy_term_cols|, locally sets 'winfixheight' and 'winfixwidth' and
	make already open windows (almost) equally high and wide.

							*easy_term_alias*
g:easy_term_alias		Dictionary (default: see below)

	Dictionary of {alias} and {cmd} pairs for |:Term| command.  The
	default aliases are: >
		{
		\ ''     : 'bash --rcfile scripts/setup_bash.sh',
		\ 'bash' : 'bash --rcfile scripts/setup_bash.sh',
		\ 'py3'  : 'python3 -i scripts/setup_python.py',
		\ 'ex'   : 'vim -e'
		}
<
	The empty key is used for the default invocation of |:Term| command.

	To overwrite an alias or add a new one, use any Dictionary
	modification method (|dict-modification|).  Example: >
		:let g:easy_term_alias = {}
		:let g:easy_term_alias['zsh'] = 'zsh -i'
		or
		:let g:easy_term_alias = { 'zsh' : 'zsh -i' }
<
==============================================================================
5. License	
==============================================================================
6. Bugs	
==============================================================================
7. Credits	
==============================================================================
8. Changelog	

 vim:tw=78:ts=8:noet:ft=help:norl:sw=8:sts=8:
